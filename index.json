[{"categories":null,"contents":"","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"http://localhost:1313/notes/go/basic/_index.bn/","summary":"","tags":null,"title":"Go বেসিক"},{"categories":null,"contents":"\rHello World A sample go program is show here.\npackage main import \u0026#34;fmt\u0026#34; func main() { message := greetMe(\u0026#34;world\u0026#34;) fmt.Println(message) } func greetMe(name string) string { return \u0026#34;Hello, \u0026#34; + name + \u0026#34;!\u0026#34; } Run the program as below:\n$ go run hello.go Variables Normal Declaration:\nvar msg string msg = \u0026#34;Hello\u0026#34; Shortcut:\nmsg := \u0026#34;Hello\u0026#34; Constants const Phi = 1.618 ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"http://localhost:1313/notes/go/basic/introduction/","summary":"\rHello World A sample go program is show here.\npackage main import \u0026#34;fmt\u0026#34; func main() { message := greetMe(\u0026#34;world\u0026#34;) fmt.Println(message) } func greetMe(name string) string { return \u0026#34;Hello, \u0026#34; + name + \u0026#34;!\u0026#34; } Run the program as below:\n$ go run hello.go Variables Normal Declaration:\nvar msg string msg = \u0026#34;Hello\u0026#34; Shortcut:\nmsg := \u0026#34;Hello\u0026#34; Constants const Phi = 1.618 ","tags":null,"title":"Introduction"},{"categories":null,"contents":"\rStrings str := \u0026#34;Hello\u0026#34; Multiline string\nstr := `Multiline string` Numbers Typical types\nnum := 3 // int num := 3. // float64 num := 3 + 4i // complex128 num := byte(\u0026#39;a\u0026#39;) // byte (alias for uint8) Other Types\nvar u uint = 7 // uint (unsigned) var p float32 = 22.7 // 32-bit float Arrays // var numbers [5]int numbers := [...]int{0, 0, 0, 0, 0} Pointers func main () { b := *getPointer() fmt.Println(\u0026#34;Value is\u0026#34;, b) func getPointer () (myPointer *int) { a := 234 return \u0026amp;a a := new(int) *a = 234 Pointers point to a memory location of a variable. Go is fully garbage-collected.\nType Conversion i := 2 f := float64(i) u := uint(i) Slice slice := []int{2, 3, 4} slice := []byte(\u0026#34;Hello\u0026#34;) ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"http://localhost:1313/notes/go/basic/types/","summary":"Strings str := \u0026#34;Hello\u0026#34; Multiline string\nstr := `Multiline string` Numbers Typical types\nnum := 3 // int num := 3. // float64 num := 3 + 4i // complex128 num := byte(\u0026#39;a\u0026#39;) // byte (alias for uint8) Other Types\nvar u uint = 7 // uint (unsigned) var p float32 = 22.7 // 32-bit float Arrays // var numbers [5]int numbers := [...]int{0, 0, 0, 0, 0} Pointers func main () { b := *getPointer() fmt.","tags":null,"title":"Basic Types"},{"categories":null,"contents":"","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"http://localhost:1313/notes/go/advanced/_index.bn/","summary":"","tags":null,"title":"অ্যাডভান্সড"},{"categories":null,"contents":"\rCondition if day == \u0026#34;sunday\u0026#34; || day == \u0026#34;saturday\u0026#34; { rest() } else if day == \u0026#34;monday\u0026#34; \u0026amp;\u0026amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(\u0026#34;Uh oh\u0026#34;) Switch switch day { case \u0026#34;sunday\u0026#34;: // cases don\u0026#39;t \u0026#34;fall through\u0026#34; by default! fallthrough case \u0026#34;saturday\u0026#34;: rest() default: work() } Loop for count := 0; count \u0026lt;= 10; count++ { fmt.Println(\u0026#34;My counter is at\u0026#34;, count) } entry := []string{\u0026#34;Jack\u0026#34;,\u0026#34;Jake\u0026#34;,\u0026#34;Jones\u0026#34;} for i, val := range entry { fmt.Printf(\u0026#34;At position %d, the character %s is present\\n\u0026#34;, i, val) n := 0 x := 42 for n != x { n := guess() } ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"http://localhost:1313/notes/go/basic/flow-control/","summary":"Condition if day == \u0026#34;sunday\u0026#34; || day == \u0026#34;saturday\u0026#34; { rest() } else if day == \u0026#34;monday\u0026#34; \u0026amp;\u0026amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(\u0026#34;Uh oh\u0026#34;) Switch switch day { case \u0026#34;sunday\u0026#34;: // cases don\u0026#39;t \u0026#34;fall through\u0026#34; by default! fallthrough case \u0026#34;saturday\u0026#34;: rest() default: work() } Loop for count := 0; count \u0026lt;= 10; count++ { fmt.Println(\u0026#34;My counter is at\u0026#34;, count) } entry := []string{\u0026#34;Jack\u0026#34;,\u0026#34;Jake\u0026#34;,\u0026#34;Jones\u0026#34;} for i, val := range entry { fmt.","tags":null,"title":"Flow Control"},{"categories":null,"contents":"\rCondition if day == \u0026#34;sunday\u0026#34; || day == \u0026#34;saturday\u0026#34; { rest() } else if day == \u0026#34;monday\u0026#34; \u0026amp;\u0026amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(\u0026#34;Uh oh\u0026#34;) ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"http://localhost:1313/notes/go/advanced/files/","summary":"\rCondition if day == \u0026#34;sunday\u0026#34; || day == \u0026#34;saturday\u0026#34; { rest() } else if day == \u0026#34;monday\u0026#34; \u0026amp;\u0026amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(\u0026#34;Uh oh\u0026#34;) ","tags":null,"title":"File Manipulation"},{"categories":null,"contents":"\rVariable NAME=\u0026#34;Jake\u0026#34; echo $NAME echo \u0026#34;$NAME\u0026#34; echo \u0026#34;${NAME} Condition if [[ -z \u0026#34;$string\u0026#34; ]]; then echo \u0026#34;String is empty\u0026#34; elif [[ -n \u0026#34;$string\u0026#34; ]]; then echo \u0026#34;String is not empty\u0026#34; fi ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"http://localhost:1313/notes/bash/basic/","summary":"\rVariable NAME=\u0026#34;Jake\u0026#34; echo $NAME echo \u0026#34;$NAME\u0026#34; echo \u0026#34;${NAME} Condition if [[ -z \u0026#34;$string\u0026#34; ]]; then echo \u0026#34;String is empty\u0026#34; elif [[ -n \u0026#34;$string\u0026#34; ]]; then echo \u0026#34;String is not empty\u0026#34; fi ","tags":null,"title":"Bash Variables"},{"categories":["Research"],"contents":"GraphQL vs REST GraphQL is an open source query language for APIs. It\u0026rsquo;s architecture is subversive compared to the more commonplace REST architecture.\nOriginally developed by Facebook in 2012, then released as an open source project in 2015. \u0026ldquo;By 2027, more than 60% of enterprises will use GraphQL in production, up from less than 30% in 2024\u0026rdquo;, according to the following Gartner Report\nDisclaimer The following article is not all encompassing. It\u0026rsquo;s main purpose is to be used as an introductory lesson to these concepts. It\u0026rsquo;s also my first article, so cheers! Any suggested edits can be sent to jake.genia@protonmail.com\nHigh-Level Overview Query is sent from the client This query is passed to a \u0026ldquo;Query Parser\u0026rdquo;, which aptly named, parses the query The query parser then checks against the \u0026ldquo;Schema\u0026rdquo; to ensure the query is valid Once the query is validated, it gets passed to a \u0026ldquo;Resolver Function\u0026rdquo; These resolvers are responsible for populating the response with the corresponding data that is requested in the query Query Type Basics In GraphQL there are \u0026ldquo;Queries\u0026rdquo; and \u0026ldquo;Mutations\u0026rdquo;\nThink of a Query as a standard read only operation (IE: GET request in REST terms) Think of a Mutation as an operation used for updating data (IE: POST request in REST terms) GraphQL APIs vs REST APIs REST APIs often struggle with providing more data than is required (over-fetching) or too little data (under-fetching)\nWhereas GraphQL is designed to allow clients to request only the required amount of data\nObserve the sample REST request below:\ncurl http://example.com/rest/v1/users This request would return all users and their data. Depending on the functionality this could be considered a bit overkill if we only wanted to grab a specific user and only certain data\nObserve the sample GraphQL query below:\nquery {\rusers {\rid\rfull_name\remail\r}\r} This request would return all users, but only their \u0026ldquo;id\u0026rdquo;, \u0026ldquo;full_name\u0026rdquo;, and \u0026ldquo;email\u0026rdquo;\nThis improves client and server performance, since REST requires users to fetch an entire data structure\nOther Differences There are many other differences between REST and GraphQL. For sake of brevity, here is a short list\nGraphQL serves all API on a single endpoint (IE: /graphql). Meaning any query made will be sent to this endpoint GraphQL queries can be sent as GET parameters or POST parameters Commonly GraphQL API only return \u0026ldquo;200 OK\u0026rdquo; responses, but this is up to the developer to implement References Gartner Report Black Hat GraphQL ","date":"July 6, 2024","hero":"/posts/rest-vs-graphql/REST-vs-GraphQL.png","permalink":"http://localhost:1313/posts/rest-vs-graphql/","summary":"GraphQL vs REST GraphQL is an open source query language for APIs. It\u0026rsquo;s architecture is subversive compared to the more commonplace REST architecture.\nOriginally developed by Facebook in 2012, then released as an open source project in 2015. \u0026ldquo;By 2027, more than 60% of enterprises will use GraphQL in production, up from less than 30% in 2024\u0026rdquo;, according to the following Gartner Report\nDisclaimer The following article is not all encompassing.","tags":["Research","Markdown"],"title":"Rest VS GraphQL"},{"categories":["Basic"],"contents":"","date":"June 8, 2020","hero":"/images/default-hero.jpg","permalink":"http://localhost:1313/posts/notes/oscp-notes/chapter-1/","summary":"","tags":["Markdown","Notes"],"title":"Chapter 1"},{"categories":null,"contents":"Go Notes ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"http://localhost:1313/notes/go/_index.bn/","summary":"Go Notes ","tags":null,"title":"Go এর নোট সমূহ"},{"categories":null,"contents":"","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"http://localhost:1313/notes/_index.bn/","summary":"","tags":null,"title":"নোট সমূহ"},{"categories":null,"contents":"Bash Notes ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"http://localhost:1313/notes/bash/_index.bn/","summary":"Bash Notes ","tags":null,"title":"ব্যাশের নোট সমূহ"}]